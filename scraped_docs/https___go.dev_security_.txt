Security Find and fix known vulnerabilities Report security bugs in the Go project Test unexpected inputs with fuzzing Secure services with Goâ€™s cryptography libraries Scan code for vulnerabilities with govulncheck Detect vulnerabilities from your editor Find Go modules to build upon Browse the vulnerability database Security Policy Common problems companies solve with Go Stories about how and why companies use Go How Go can help keep you secure by default Tips for writing clear, performant, and idiomatic Go code A complete introduction to building software with Go Reference documentation for Go's standard library Learn what's new in each Go release Videos from prior events Meet other local Go developers Learn and network with Go developers from around the world The Go project's official blog. Get help and stay informed from Go This page provides resources for Go developers to improve security for their projects. (See also:Security Best Practices for Go Developers.) Goâ€™s vulnerability detection aims to provide low-noise, reliable tools for developers to learn about known vulnerabilities that may affect their projects. For an overview, start atthis summary and FAQ pageabout Goâ€™s vulnerability management architecture. For an applied approach, explore the tools below. Developers can use the govulncheck tool to determine whether any known vulnerabilities affect their code and prioritize next steps based on which vulnerable functions and methods are actually called. The VS Code Go extension checks third-party dependencies and surfaces relevant vulnerabilities. Pkg.go.devis a website for discovering, evaluating and learning more about Go packages and modules. When discovering and evaluating packages on pkg.go.dev, you willsee a banner on the top of a pageif there are vulnerabilities in that version. Additionally, you can see thevulnerabilities impacting each version of a packageon the version history page. The Go vulnerability database collects data directly from Go package maintainers as well as from outside sources such asMITREandGitHub. Reports are curated by the Go Security team. Consult the Security Policy for instructions on how toreport a vulnerability in the Go project. The page also details the Go security teamâ€™s process of tracking issues and disclosing them to the public. See therelease historyfor details about past security fixes. Per therelease policy, we issue security fixes to the two most recent major releases of Go. Go native fuzzing provides a type of automated testing which continuously manipulates inputs to a program to find bugs. Go supports fuzzing in its standard toolchain beginning in Go 1.18. Native Go fuzz tests aresupported by OSS-Fuzz. Goâ€™s cryptography libraries aim to help developers build secure applications. See documentation for thecrypto packagesandgolang.org/x/crypto/. Why GoarrowdropdownPress Enter to activate/deactivate dropdownCase StudiesCommon problems companies solve with GoUse CasesStories about how and why companies use GoSecurityHow Go can help keep you secure by default Case StudiesCommon problems companies solve with Go Use CasesStories about how and why companies use Go SecurityHow Go can help keep you secure by default LearnPress Enter to activate/deactivate dropdown DocsarrowdropdownPress Enter to activate/deactivate dropdownEffective GoTips for writing clear, performant, and idiomatic Go codeGo User ManualA complete introduction to building software with GoStandard libraryReference documentation for Go's standard libraryRelease NotesLearn what's new in each Go release Effective GoTips for writing clear, performant, and idiomatic Go code Go User ManualA complete introduction to building software with Go Standard libraryReference documentation for Go's standard library Release NotesLearn what's new in each Go release PackagesPress Enter to activate/deactivate dropdown CommunityarrowdropdownPress Enter to activate/deactivate dropdownRecorded TalksVideos from prior eventsMeetupsopeninnewMeet other local Go developersConferencesopeninnewLearn and network with Go developers from around the worldGo blogThe Go project's official blog.Go projectGet help and stay informed from GoGet connected Recorded TalksVideos from prior events MeetupsopeninnewMeet other local Go developers ConferencesopeninnewLearn and network with Go developers from around the world Go blogThe Go project's official blog. Go projectGet help and stay informed from Go Get connected Why GonavigatenextnavigatebeforeWhy GoCase StudiesUse CasesSecurity Case Studies Use Cases Security Learn DocsnavigatenextnavigatebeforeDocsEffective GoGo User ManualStandard libraryRelease Notes Effective Go Go User Manual Standard library Release Notes Packages CommunitynavigatenextnavigatebeforeCommunityRecorded TalksMeetupsopeninnewConferencesopeninnewGo blogGo projectGet connected Recorded Talks Meetupsopeninnew Conferencesopeninnew Go blog Go project Get connected View the govulncheck documentation Tutorial: Get started with govulncheck User documentation Download VS Code Go Tutorial: Get started with VS Code Go Browse reports in the Go vulnerability database View the Go Vulnerability Database documentation Contribute a public vulnerability to the database Review the basics of fuzzing Tutorial: Get started with fuzzing Copyright Terms of Service Privacy Policy Report an Issue ðŸ’¡ Why Go navigatenext navigatebeforeWhy Go Case Studies Use Cases Security Learn Docs navigatenext navigatebeforeDocs Effective Go Go User Manual Standard library Release Notes Packages Community navigatenext navigatebeforeCommunity Recorded Talks Meetups openinnew Conferences openinnew Go blog Go project Get connected