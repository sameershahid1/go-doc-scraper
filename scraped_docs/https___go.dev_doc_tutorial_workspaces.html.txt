Tutorial: Getting started with multi-module workspaces Prerequisites Create a module for your code Create the workspace Download and modify thegolang.org/x/example/hellomodule Learn more about workspaces Initialize the workspace Run the program in the workspace directory Run the code in the workspace Future step Common problems companies solve with Go Stories about how and why companies use Go How Go can help keep you secure by default Tips for writing clear, performant, and idiomatic Go code A complete introduction to building software with Go Reference documentation for Go's standard library Learn what's new in each Go release Videos from prior events Meet other local Go developers Learn and network with Go developers from around the world The Go project's official blog. Get help and stay informed from Go This tutorial introduces the basics of multi-module workspaces in Go. With multi-module workspaces, you can tell the Go command that you’re writing code in multiple modules at the same time and easily build and run code in those modules. In this tutorial, you’ll create two modules in a shared multi-module workspace, make changes across those modules, and see the results of those changes in a build. Note:For other tutorials, seeTutorials. This tutorial requires go1.18 or later. Make sure you’ve installed Go at Go 1.18 or later using the links atgo.dev/dl. To begin, create a module for the code you’ll write. Open a command prompt and change to your home directory. On Linux or Mac: On Windows: The rest of the tutorial will show a $ as the prompt. The commands you use will work on Windows too. From the command prompt, create a directory for your code called workspace. Initialize the module Our example will create a new modulehellothat will depend on the golang.org/x/example module. Create the hello module: Add a dependency on the golang.org/x/example/hello/reverse package by usinggo get. Create hello.go in the hello directory with the following contents: Now, run the hello program: In this step, we’ll create ago.workfile to specify a workspace with the module. In theworkspacedirectory, run: Thego work initcommand tellsgoto create ago.workfile for a workspace containing the modules in the./hellodirectory. Thegocommand produces ago.workfile that looks like this: Thego.workfile has similar syntax togo.mod. Thegodirective tells Go which version of Go the file should be interpreted with. It’s similar to thegodirective in thego.modfile. Theusedirective tells Go that the module in thehellodirectory should be main modules when doing a build. So in any subdirectory ofworkspacethe module will be active. In theworkspacedirectory, run: The Go command includes all the modules in the workspace as main modules. This allows us to refer to a package in the module, even outside the module. Running thego runcommand outside the module or the workspace would result in an error because thegocommand wouldn’t know which modules to use. Next, we’ll add a local copy of thegolang.org/x/example/hellomodule to the workspace. That module is stored in a subdirectory of thego.googlesource.com/exampleGit repository. We’ll then add a new function to thereversepackage that we can use instead ofString. In this step, we’ll download a copy of the Git repo containing thegolang.org/x/example/hellomodule, add it to the workspace, and then add a new function to it that we will use from the hello program. Clone the repository From the workspace directory, run thegitcommand to clone the repository: Add the module to the workspace The Git repo was just checked out into./example. The source code for thegolang.org/x/example/hellomodule is in./example/hello. Add it to the workspace: Thego work usecommand adds a new module to the go.work file. It will now look like this: The workspace now includes both theexample.com/hellomodule and thegolang.org/x/example/hellomodule, which provides thegolang.org/x/example/hello/reversepackage. This will allow us to use the new code we will write in our copy of thereversepackage instead of the version of the package in the module cache that we downloaded with thego getcommand. Add the new function. We’ll add a new function to reverse a number to thegolang.org/x/example/hello/reversepackage. Create a new file namedint.goin theworkspace/example/hello/reversedirectory containing the following contents: Modify the hello program to use the function. Modify the contents ofworkspace/hello/hello.goto contain the following contents: From the workspace directory, run The Go command finds theexample.com/hellomodule specified in the command line in thehellodirectory specified by thego.workfile, and similarly resolves thegolang.org/x/example/hello/reverseimport using thego.workfile. go.workcan be used instead of addingreplacedirectives to work across multiple modules. Since the two modules are in the same workspace it’s easy to make a change in one module and use it in another. Now, to properly release these modules we’d need to make a release of thegolang.org/x/example/hellomodule, for example atv0.1.0. This is usually done by tagging a commit on the module’s version control repository. See themodule release workflow documentationfor more details. Once the release is done, we can increase the requirement on thegolang.org/x/example/hellomodule inhello/go.mod: That way, thegocommand can properly resolve the modules outside the workspace. Thegocommand has a couple of subcommands for working with workspaces in addition togo work initwhich we saw earlier in the tutorial: SeeWorkspacesin the Go Modules Reference for more detail on workspaces andgo.workfiles. Why GoarrowdropdownPress Enter to activate/deactivate dropdownCase StudiesCommon problems companies solve with GoUse CasesStories about how and why companies use GoSecurityHow Go can help keep you secure by default Case StudiesCommon problems companies solve with Go Use CasesStories about how and why companies use Go SecurityHow Go can help keep you secure by default LearnPress Enter to activate/deactivate dropdown DocsarrowdropdownPress Enter to activate/deactivate dropdownEffective GoTips for writing clear, performant, and idiomatic Go codeGo User ManualA complete introduction to building software with GoStandard libraryReference documentation for Go's standard libraryRelease NotesLearn what's new in each Go release Effective GoTips for writing clear, performant, and idiomatic Go code Go User ManualA complete introduction to building software with Go Standard libraryReference documentation for Go's standard library Release NotesLearn what's new in each Go release PackagesPress Enter to activate/deactivate dropdown CommunityarrowdropdownPress Enter to activate/deactivate dropdownRecorded TalksVideos from prior eventsMeetupsopeninnewMeet other local Go developersConferencesopeninnewLearn and network with Go developers from around the worldGo blogThe Go project's official blog.Go projectGet help and stay informed from GoGet connected Recorded TalksVideos from prior events MeetupsopeninnewMeet other local Go developers ConferencesopeninnewLearn and network with Go developers from around the world Go blogThe Go project's official blog. Go projectGet help and stay informed from Go Get connected Why GonavigatenextnavigatebeforeWhy GoCase StudiesUse CasesSecurity Case Studies Use Cases Security Learn DocsnavigatenextnavigatebeforeDocsEffective GoGo User ManualStandard libraryRelease Notes Effective Go Go User Manual Standard library Release Notes Packages CommunitynavigatenextnavigatebeforeCommunityRecorded TalksMeetupsopeninnewConferencesopeninnewGo blogGo projectGet connected Recorded Talks Meetupsopeninnew Conferencesopeninnew Go blog Go project Get connected Documentation Tutorials Tutorial: Getting started with multi-module workspaces An installation of Go 1.18 or later. A tool to edit your code.Any text editor you have will work fine. A command terminal.Go works well using any terminal on Linux and Mac, and on PowerShell or cmd in Windows. Open a command prompt and change to your home directory.On Linux or Mac:$ cdOn Windows:C:\> cd %HOMEPATH%The rest of the tutorial will show a $ as the prompt. The commands you use will work on Windows too. From the command prompt, create a directory for your code called workspace.$ mkdir workspace $ cd workspace Initialize the moduleOur example will create a new modulehellothat will depend on the golang.org/x/example module.Create the hello module:$ mkdir hello $ cd hello $ go mod init example.com/hello go: creating new go.mod: module example.com/helloAdd a dependency on the golang.org/x/example/hello/reverse package by usinggo get.$ go get golang.org/x/example/hello/reverseCreate hello.go in the hello directory with the following contents:package main import ( "fmt" "golang.org/x/example/hello/reverse" ) func main() { fmt.Println(reverse.String("Hello")) }Now, run the hello program:$ go run . olleH Clone the repositoryFrom the workspace directory, run thegitcommand to clone the repository:$ git clone https://go.googlesource.com/example Cloning into 'example'... remote: Total 165 (delta 27), reused 165 (delta 27) Receiving objects: 100% (165/165), 434.18 KiB | 1022.00 KiB/s, done. Resolving deltas: 100% (27/27), done. Add the module to the workspaceThe Git repo was just checked out into./example. The source code for thegolang.org/x/example/hellomodule is in./example/hello. Add it to the workspace:$ go work use ./example/helloThego work usecommand adds a new module to the go.work file. It will now look like this:go 1.18 use ( ./hello ./example/hello )The workspace now includes both theexample.com/hellomodule and thegolang.org/x/example/hellomodule, which provides thegolang.org/x/example/hello/reversepackage.This will allow us to use the new code we will write in our copy of thereversepackage instead of the version of the package in the module cache that we downloaded with thego getcommand. Add the new function.We’ll add a new function to reverse a number to thegolang.org/x/example/hello/reversepackage.Create a new file namedint.goin theworkspace/example/hello/reversedirectory containing the following contents:package reverse import "strconv" // Int returns the decimal reversal of the integer i. func Int(i int) int { i,  = strconv.Atoi(String(strconv.Itoa(i))) return i } Modify the hello program to use the function.Modify the contents ofworkspace/hello/hello.goto contain the following contents:package main import ( "fmt" "golang.org/x/example/hello/reverse" ) func main() { fmt.Println(reverse.String("Hello"), reverse.Int(24601)) } go work use [-r] [dir]adds ausedirective to thego.workfile fordir, if it exists, and removes theusedirectory if the argument directory doesn’t exist. The-rflag examines subdirectories ofdirrecursively. go work editedits thego.workfile similarly togo mod edit go work syncsyncs dependencies from the workspace’s build list into each of the workspace modules. Copyright Terms of Service Privacy Policy Report an Issue go $ cd  go C:\> cd %HOMEPATH%  go $ mkdir workspace $ cd workspace  go $ mkdir hello $ cd hello $ go mod init example.com/hello go: creating new go.mod: module example.com/hello  go $ go get golang.org/x/example/hello/reverse  go package main import ( "fmt" "golang.org/x/example/hello/reverse" ) func main() { fmt.Println(reverse.String("Hello")) }  go $ go run . olleH  go $ go work init ./hello  go go 1.18 use ./hello  go $ go run ./hello olleH  go $ git clone https://go.googlesource.com/example Cloning into 'example'... remote: Total 165 (delta 27), reused 165 (delta 27) Receiving objects: 100% (165/165), 434.18 KiB | 1022.00 KiB/s, done. Resolving deltas: 100% (27/27), done.  go $ go work use ./example/hello  go go 1.18 use ( ./hello ./example/hello )  go package reverse import "strconv" // Int returns the decimal reversal of the integer i. func Int(i int) int { i,  = strconv.Atoi(String(strconv.Itoa(i))) return i }  go package main import ( "fmt" "golang.org/x/example/hello/reverse" ) func main() { fmt.Println(reverse.String("Hello"), reverse.Int(24601)) }  go $ go run ./hello olleH 10642  go cd hello go get golang.org/x/example/hello@v0.1.0  $ cd C:\> cd %HOMEPATH% $ mkdir workspace $ cd workspace hello $ mkdir hello $ cd hello $ go mod init example.com/hello go: creating new go.mod: module example.com/hello go get $ go get golang.org/x/example/hello/reverse package main import ( "fmt" "golang.org/x/example/hello/reverse" ) func main() { fmt.Println(reverse.String("Hello")) } $ go run . olleH go.work workspace $ go work init ./hello go work init go ./hello go 1.18 use ./hello go.mod use $ go run ./hello olleH go run golang.org/x/example/hello go.googlesource.com/example reverse String git $ git clone https://go.googlesource.com/example Cloning into 'example'... remote: Total 165 (delta 27), reused 165 (delta 27) Receiving objects: 100% (165/165), 434.18 KiB | 1022.00 KiB/s, done. Resolving deltas: 100% (27/27), done. ./example ./example/hello $ go work use ./example/hello go work use go 1.18 use ( ./hello ./example/hello ) example.com/hello golang.org/x/example/hello/reverse int.go workspace/example/hello/reverse package reverse import "strconv" // Int returns the decimal reversal of the integer i. func Int(i int) int { i,  = strconv.Atoi(String(strconv.Itoa(i))) return i } workspace/hello/hello.go package main import ( "fmt" "golang.org/x/example/hello/reverse" ) func main() { fmt.Println(reverse.String("Hello"), reverse.Int(24601)) } $ go run ./hello olleH 10642 replace v0.1.0 hello/go.mod cd hello go get golang.org/x/example/hello@v0.1.0 go work use [-r] [dir] dir -r go work edit go mod edit go work sync 💡 Why Go navigatenext navigatebeforeWhy Go Case Studies Use Cases Security Learn Docs navigatenext navigatebeforeDocs Effective Go Go User Manual Standard library Release Notes Packages Community navigatenext navigatebeforeCommunity Recorded Talks Meetups openinnew Conferences openinnew Go blog Go project Get connected