Tutorial: Create a Go module Prerequisites Start a module that others can use Common problems companies solve with Go Stories about how and why companies use Go How Go can help keep you secure by default Tips for writing clear, performant, and idiomatic Go code A complete introduction to building software with Go Reference documentation for Go's standard library Learn what's new in each Go release Videos from prior events Meet other local Go developers Learn and network with Go developers from around the world The Go project's official blog. Get help and stay informed from Go This is the first part of a tutorial that introduces a few fundamental features of the Go language. If you're just getting started with Go, be sure to take a look atTutorial: Get started with Go, which introduces thegocommand, Go modules, and very simple Go code. In this tutorial you'll create two modules. The first is a library which is intended to be imported by other libraries or applications. The second is a caller application which will use the first. This tutorial's sequence includes seven brief topics that each illustrate a different part of the language. Start by creating a Go module. In a module, you collect one or more related packages for a discrete and useful set of functions. For example, you might create a module with packages that have functions for doing financial analysis so that others writing financial applications can use your work. For more about developing modules, seeDeveloping and publishing modules. Go code is grouped into packages, and packages are grouped into modules. Your module specifies dependencies needed to run your code, including the Go version and the set of other modules it requires. As you add or improve functionality in your module, you publish new versions of the module. Developers writing code that calls functions in your module can import the module's updated packages and test with the new version before putting it into production use. On Linux or Mac: On Windows: For example, from your home directory use the following commands: Run thego mod initcommand, giving it your module path -- here, useexample.com/greetings. If you publish a module, thismustbe a path from which your module can be downloaded by Go tools. That would be your code's repository. For more on naming your module with a module path, seeManaging dependencies. Thego mod initcommand creates a go.mod file to track your code's dependencies. So far, the file includes only the name of your module and the Go version your code supports. But as you add dependencies, the go.mod file will list the versions your code depends on. This keeps builds reproducible and gives you direct control over which module versions to use. This is the first code for your module. It returns a greeting to any caller that asks for one. You'll write code that calls this function in the next step. In this code, you: This function takes anameparameter whose type isstring. The function also returns astring. In Go, a function whose name starts with a capital letter can be called by a function not in the same package. This is known in Go as an exported name. For more about exported names, seeExported namesin the Go tour. In Go, the:=operator is a shortcut for declaring and initializing a variable in one line (Go uses the value on the right to determine the variable's type). Taking the long way, you might have written this as: In the next step, you'll call this function from another module. Call your code from another module > Why GoarrowdropdownPress Enter to activate/deactivate dropdownCase StudiesCommon problems companies solve with GoUse CasesStories about how and why companies use GoSecurityHow Go can help keep you secure by default Case StudiesCommon problems companies solve with Go Use CasesStories about how and why companies use Go SecurityHow Go can help keep you secure by default LearnPress Enter to activate/deactivate dropdown DocsarrowdropdownPress Enter to activate/deactivate dropdownEffective GoTips for writing clear, performant, and idiomatic Go codeGo User ManualA complete introduction to building software with GoStandard libraryReference documentation for Go's standard libraryRelease NotesLearn what's new in each Go release Effective GoTips for writing clear, performant, and idiomatic Go code Go User ManualA complete introduction to building software with Go Standard libraryReference documentation for Go's standard library Release NotesLearn what's new in each Go release PackagesPress Enter to activate/deactivate dropdown CommunityarrowdropdownPress Enter to activate/deactivate dropdownRecorded TalksVideos from prior eventsMeetupsopeninnewMeet other local Go developersConferencesopeninnewLearn and network with Go developers from around the worldGo blogThe Go project's official blog.Go projectGet help and stay informed from GoGet connected Recorded TalksVideos from prior events MeetupsopeninnewMeet other local Go developers ConferencesopeninnewLearn and network with Go developers from around the world Go blogThe Go project's official blog. Go projectGet help and stay informed from Go Get connected Why GonavigatenextnavigatebeforeWhy GoCase StudiesUse CasesSecurity Case Studies Use Cases Security Learn DocsnavigatenextnavigatebeforeDocsEffective GoGo User ManualStandard libraryRelease Notes Effective Go Go User Manual Standard library Release Notes Packages CommunitynavigatenextnavigatebeforeCommunityRecorded TalksMeetupsopeninnewConferencesopeninnewGo blogGo projectGet connected Recorded Talks Meetupsopeninnew Conferencesopeninnew Go blog Go project Get connected Documentation Tutorials Tutorial: Create a Go module Create a module -- Write a small module with functions you can call from another module. Call your code from another module-- Import and use your new module. Return and handle an error-- Add simple error handling. Return a random greeting-- Handle data in slices (Go's dynamically-sized arrays). Return greetings for multiple people-- Store key/value pairs in a map. Add a test-- Use Go's built-in unit testing features to test your code. Compile and install the application-- Compile and install your code locally. Some programming experience.The code here is pretty simple, but it helps to know something about functions, loops, and arrays. A tool to edit your code.Any text editor you have will work fine. Most text editors have good support for Go. The most popular are VSCode (free), GoLand (paid), and Vim (free). A command terminal.Go works well using any terminal on Linux and Mac, and on PowerShell or cmd in Windows. Open a command prompt andcdto your home directory.On Linux or Mac:cdOn Windows:cd %HOMEPATH% Create agreetingsdirectory for your Go module source code.For example, from your home directory use the following commands:mkdir greetings cd greetings Start your module using thego mod initcommand.Run thego mod initcommand, giving it your module path -- here, useexample.com/greetings. If you publish a module, thismustbe a path from which your module can be downloaded by Go tools. That would be your code's repository.For more on naming your module with a module path, seeManaging dependencies.$ go mod init example.com/greetings go: creating new go.mod: module example.com/greetingsThego mod initcommand creates a go.mod file to track your code's dependencies. So far, the file includes only the name of your module and the Go version your code supports. But as you add dependencies, the go.mod file will list the versions your code depends on. This keeps builds reproducible and gives you direct control over which module versions to use. In your text editor, create a file in which to write your code and call it greetings.go. Paste the following code into your greetings.go file and save the file.package greetings import "fmt" // Hello returns a greeting for the named person. func Hello(name string) string { // Return a greeting that embeds the name in a message. message := fmt.Sprintf("Hi, %v. Welcome!", name) return message }This is the first code for your module. It returns a greeting to any caller that asks for one. You'll write code that calls this function in the next step.In this code, you:Declare agreetingspackage to collect related functions.Implement aHellofunction to return the greeting.This function takes anameparameter whose type isstring. The function also returns astring. In Go, a function whose name starts with a capital letter can be called by a function not in the same package. This is known in Go as an exported name. For more about exported names, seeExported namesin the Go tour.Declare amessagevariable to hold your greeting.In Go, the:=operator is a shortcut for declaring and initializing a variable in one line (Go uses the value on the right to determine the variable's type). Taking the long way, you might have written this as:var message string message = fmt.Sprintf("Hi, %v. Welcome!", name)Use thefmtpackage'sSprintffunctionto create a greeting message. The first argument is a format string, andSprintfsubstitutes thenameparameter's value for the%vformat verb. Inserting the value of thenameparameter completes the greeting text.Return the formatted greeting text to the caller. Declare agreetingspackage to collect related functions. Implement aHellofunction to return the greeting.This function takes anameparameter whose type isstring. The function also returns astring. In Go, a function whose name starts with a capital letter can be called by a function not in the same package. This is known in Go as an exported name. For more about exported names, seeExported namesin the Go tour. Declare amessagevariable to hold your greeting.In Go, the:=operator is a shortcut for declaring and initializing a variable in one line (Go uses the value on the right to determine the variable's type). Taking the long way, you might have written this as:var message string message = fmt.Sprintf("Hi, %v. Welcome!", name) Use thefmtpackage'sSprintffunctionto create a greeting message. The first argument is a format string, andSprintfsubstitutes thenameparameter's value for the%vformat verb. Inserting the value of thenameparameter completes the greeting text. Return the formatted greeting text to the caller. Copyright Terms of Service Privacy Policy Report an Issue go cd  go cd %HOMEPATH%  go mkdir greetings cd greetings  go $ go mod init example.com/greetings go: creating new go.mod: module example.com/greetings  go package greetings import "fmt" // Hello returns a greeting for the named person. func Hello(name string) string { // Return a greeting that embeds the name in a message. message := fmt.Sprintf("Hi, %v. Welcome!", name) return message }  go var message string message = fmt.Sprintf("Hi, %v. Welcome!", name)  go cd greetings go mod init example.com/greetings Hello name string message := fmt Sprintf %v 💡 Why Go navigatenext navigatebeforeWhy Go Case Studies Use Cases Security Learn Docs navigatenext navigatebeforeDocs Effective Go Go User Manual Standard library Release Notes Packages Community navigatenext navigatebeforeCommunity Recorded Talks Meetups openinnew Conferences openinnew Go blog Go project Get connected 💡 Note: For other tutorials, see Tutorials.